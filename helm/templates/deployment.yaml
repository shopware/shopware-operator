{{- if not .Values.crds.installOnly }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: '{{ .Release.Name }}-shopware-operator'
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: shopware-operator
    app.kubernetes.io/instance: shopware-operator
    app.kubernetes.io/managed-by: shopware-operator
    app.kubernetes.io/name: deployment
    app.kubernetes.io/part-of: shopware-operator
    control-plane: shopware-operator
{{- with .Values.labels }}
    {{- toYaml . | nindent 4 }}
{{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      control-plane: shopware-operator
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: operator
        {{- with .Values.podAnnotations }}
            {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        control-plane: shopware-operator
    spec:
      {{- if hasKey .Values "affinity" }}
      affinity:
        {{- with .Values.affinity }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- else }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                - arm64
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
      {{- end }}
      tolerations:
        {{- with .Values.tolerations }}
          {{- toYaml . | nindent 10 }}
        {{- end }}
      containers:
      - args:
        - --leader-elect
        {{- if .Values.logStructured }}
        - --log-structured
        {{- end }}
        {{- if .Values.debug }}
        - --debug
        {{- end }}
        {{- if and (hasKey .Values "events") (.Values.events.enable) }}
        - --enable-events
        - -nats-address
        - {{ .Values.events.nats.address }}
        {{- if hasKey .Values.events.nats "credentialsRef" }}
        - -nats-credentials 
        - /secrets/{{ .Values.events.nats.credentialsRef.key }}
        {{- end }}
        {{- if hasKey .Values.events.nats "nkeyRef" }}
        - -nats-nkey
        - /secrets/{{ .Values.events.nats.nkeyRef.key }}
        {{- end }}
        - -nats-topic 
        - {{ .Values.events.nats.topic }}
        {{- end }}
        command:
        - /manager
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: operator
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          {{- with .Values.resources }}
              {{- toYaml . | nindent 10 }}
          {{- end }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
          {{- if and (hasKey .Values "events") (.Values.events.enable) (hasKey .Values.events.nats "nkeyRef") }}
          - mountPath: /secrets
            name: nkey
          {{- end }}
          {{- if and (hasKey .Values "events") (.Values.events.enable) (hasKey .Values.events.nats "credentialsRef") }}
          - mountPath: /secrets
            name: credentials
          {{- end }}
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: '{{ .Release.Name }}-shopware-operator'
      terminationGracePeriodSeconds: 10
      volumes:
        {{- if and (hasKey .Values "events") (.Values.events.enable) (hasKey .Values.events.nats "nkeyRef") }}
        - name: nkey
          secret:
            secretName: {{ .Values.events.nats.nkeyRef.name }}
        {{- end }}
        {{- if and (hasKey .Values "events") (.Values.events.enable) (hasKey .Values.events.nats "credentialsRef") }}
        - name: credentials
          secret:
            secretName: {{ .Values.events.nats.credentialsRef.name }}
        {{- end }}
{{- end }}
